- DBus: introspectionの方法だけでもまとめとくといいかもしれない。
  Introspect, ListNames, "/"ノードからトラバースする。など。

- Web Lens (or PDash?)
  Unity Lensは独立のデーモンとなり、DashとDBus通信するみたい。
  DBus通信できればWebブラウザから使えるんじゃね。
  http://gihyo.jp/admin/serial/01/ubuntu-recipe/0209
  http://developer.ubuntu.com/resources/technologies/lenses-and-scopes/
  https://wiki.ubuntu.com/Unity/Lenses
  くりさんのDBusチュートリアル http://www.usupi.org/sysad/175.html http://www.usupi.org/sysad/176.html 
  Perl + DBusサンプル http://bratislava.pm.org/presentation/dbus/index.html
  IBusのバスソケットの見つけ方 http://linux.lsdev.sil.org/blog/?p=58
  - lensを立ち上げる
    $ /opt/extras.ubuntu.com/unity-lens-github/unity-lens-github 
    $ /usr/lib/unity-lens-files/unity-files-daemon
  - 自分で上げないでも、サービスに接続しようとするとDBusが勝手に立ち上げてくれるっぽい。
  - DBusのインタフェースを調べてみる
    $ dbus-send --session --type=method_call --print-reply --dest=unity.singlet.lens.github /unity/singlet/lens/github org.freedesktop.DBus.Introspectable.Introspect
    うん。なんかいけそうな気がしてきた。
  - libunityのPerlバインドっぽいのがあったけどいろいろ怪しそう。
  - うーん、それっぽいメソッドは見つかるんだけど、使い方が分からん。
    引数の表記は http://dbus.freedesktop.org/doc/dbus-specification.html#type-system このへん。
    dbus-monitorっていうsnifferを使うといいかもしれない。
    $ dbus-monitor --session "sender='com.canonical.Unity.Lens.Files'"
    $ dbus-monitor --session "destination='com.canonical.Unity.Lens.Files'"
    D-Feetっていうのもある。これにsuniffingの機能はないかな。あくまでintrospectionとメソッドテスト。
  - どうやらこんな感じ？

    1. GlobalSearchメソッドで検索クエリ出す。 -> 戻り値としてmodel-seqnumを受け取る。
    2. 検索結果はsignalとして非同期で飛んでくる。(クエリとの対応付けはmodel-seqnumによる。)
       このsignalを飛ばすのは同じサービスバスの別のオブジェクトで、"GlobalResults"で終わるオブジェクトっぽい。
       /com/canonical/dee/model/canonical/Unity/Lens/applications/T****/GlobalResults
       で、signalは com.canonical.Dee.Model.Commit
       とりあえず、こいつをウォッチしてみたらちゃんと検索結果がとれた。
       検索結果はある程度キャッシュされて、同じキーワード入れると同じmodel-seqnumが返ってきたりするっぽいね。

  - D-Feetによると、Commitイベントのコールバックに与えられる引数仕様は、
    String swarm_name, Array[String] schema, Array[Array[Variant]] row_data, Array[Uint32] positions, Array[Byte] change_types,
    Struct{Uint64, Uint64} seqnum_before_after らしい。

    - schemaは[qw(s s u s s s s)]とかで、row_dataのフォーマットを示しているっぽい。
    - row_dataは、Lens.Applicationsでは
      [[ID, 識別名, ?, MIMEタイプ, ロケール名, 詳細説明, URL], [...], ...] て感じ。検索結果がないときは空エントリが入ったりする。
    - positionsは、各row_dataの検索結果上の位置を表しているのか？部分表示するときに使うのかも。
    - change_typesも各row_dataに付随する属性に見えるが、詳細は不明
    - seqnum_before_afterはそのまんま、前回検索結果の対応seqnumと今回検索結果の対応seqnumだと考えられる。
    - row_dataにはなぜか前回検索結果に該当する位置のエントリが空配列になって飛んできていたりする。
      なぜそうするのかは謎。
    - でも一回の検索の通信シーケンスは意外と単純に見える。
    - 前回の検索結果と今回の検索結果が同じ時は同じseqnumが送られ、Commitシグナルは発火しない。
      よって、前回検索結果を常に知っておかないとCommitシグナル待ちで半永久的にデッドロックする危険がある。
    - Dee.ModelのClone()メソッドを使うと、前回検索結果をメソッドで取得できるっぽい。
      つーことは、もういっそのことSearch() からの Clone() の方がわかりやすい気がしてきた。それでいこう。
    - 分かりにくいなあ。

  - Lensのサービス名とクエリオブジェクト名は設定ファイル(.lensファイル)からとれるとして、
    検索結果を投げるオブジェクト名をどうとってくるかが分からない。

    - おそらく、クエリオブジェクトのcom.canonical.Unity.Lens.Changedシグナルだと思う。
    - こいつは、InfoRequestメソッドを呼び出すとemitしてくれるみたい。
    - ChangedシグナルにはGlobalResultsのサービス名が含まれる。(オブジェクト名ではない)
      これでいいんじゃね？


オブジェクトを列挙する::

    sub _object_paths {
        #### object paths enumeration
        my ($self) = @_;
        my $service = $self->{service};
        my @pending_objects = ($service->get_object('/'));
        my @paths = ();
        while(my $obj = pop @pending_objects) {
            try {
                my $thispath = $obj->get_object_path;
                push(@paths, $thispath);
                my $xml = $obj->as_interface('org.freedesktop.DBus.Introspectable')->Introspect;
                ## print "$xml\n";
                my $desc = Net::DBus::Binding::Introspector->new(object_path => $thispath, xml => $xml);
                my @children = $desc->list_children;
                foreach my $child_path (@children) {
                    ## print "children: $child_path\n";
                    push(@pending_objects, $obj->get_child_object($thispath =~ m|/$| ? $child_path : "/".$child_path));
                }
            }catch {
                my $e = shift;
                carp $e;
            };
        }
        return \@paths;
    }

